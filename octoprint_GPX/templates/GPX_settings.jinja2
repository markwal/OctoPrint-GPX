<form class="form-horizontal well" id="gpx_settings">
    <fieldset>
        <legend>GPX</legend>
        <div class="control-group">
            <div class="controls" data-toggle="tooltip" title="{{ _('Use GPX to translate between gcode and x3g. Change takes effect on next connect.') }}">
                <label class="checkbox">
                    <input type="checkbox" data-bind="checked: settings.plugins.GPX.enabled"> {{ _('Enable GPX') }}
                </label>
            </div>
            <div class="controls" data-toggle="tooltip" title="{{ _("There's a lot of start gcode out there that doesn't assert the entire coordinate system off the bat, letting left over state from manual moves and/or prints confuse things. This checkbox forces a G92 X0 Y0 Z0 A0 B0 to occur before anything else. Do *not* use if you're continuing a print with manually edited g-code.") }}">
                <label class="checkbox">
                    <input type="checkbox" data-bind="checked: settings.plugins.GPX.clear_coords_on_print_start"> {{ _('Clear coordinate system before print start') }}
                </label>
            </div>
            <div class="controls" data-toggle="tooltip" title="{{ _('Include prereleases when checking for updates') }}">
                <label class="checkbox">
                    <input type="checkbox" data-bind="checked: settings.plugins.GPX.prerelease"> {{ _('Show pre-release updates') }}
                </label>
            </div>
            <div class="controls" data-toggle="tooltip" title="{{ _('Tell the GPX gcode processor to be more verbose in the plugin log. Warning, *very* verbose and GPX log deletion is manual on the Logs pane.') }}">
                <label class="checkbox">
                    <input type="checkbox" data-bind="checked: settings.plugins.GPX.verbose"> {{ _('Verbose GPX logging') }}&nbsp;<span class="label label-important">{{ _('Warning') }}</span>
                </label>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Machine type:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Choose which machine type gpx should use for the conversion. Gcode uses mm and x3g uses steps, so gpx needs to know how many steps per mm among other things.') }}">
                <select data-bind="value: ini.printer.machine_type">
                    <option value="cxy">{{ _('Core-XY with HBP - single extruder') }}</option>
                    <option value="cxysz">{{ _('Core-XY with HBP - single extruder, slow Z') }}</option>
                    <option value="cr1">{{ _('Clone R1 Single with HBP') }}</option>
                    <option value="cr1d">{{ _('Clone R1 Dual with HBP') }}</option>
                    <option value="c3">{{ _('Cupcake Gen3 XYZ, Mk5/6 + Gen4 Extruder') }}</option>
                    <option value="c4">{{ _('Cupcake Gen4 XYZ, Mk5/6 + Gen4 Extruder') }}</option>
                    <option value="cp4">{{ _('Cupcake Pololu XYZ, Mk5/6 + Gen4 Extruder') }}</option>
                    <option value="cpp">{{ _('Cupcake Pololu XYZ, Mk5/6 + Pololu Extruder') }}</option>
                    <option value="fcp">{{ _('FlashForge Creator Pro') }}</option>
                    <option value="t6">{{ _('TOM Mk6 - single extruder') }}</option>
                    <option value="t7">{{ _('TOM Mk7 - single extruder') }}</option>
                    <option value="t7d">{{ _('TOM Mk7 - dual extruder') }}</option>
                    <option value="r1">{{ _('Replicator 1 - single extruder') }}</option>
                    <option value="r1d">{{ _('Replicator 1 - dual extruder') }}</option>
                    <option value="r2">{{ _('Replicator 2 (default)') }}</option>
                    <option value="r2h">{{ _('Replicator 2 with HBP') }}</option>
                    <option value="r2x">{{ _('Replicator 2X') }}</option>
                    <option value="z">{{ _('ZYYX - single extruder') }}</option>
                    <option value="zd">{{ _('ZYYX - dual extruder') }}</option>
                    <option value="zp">{{ _('ZYYX pro') }}</option>
                </select>
                <button class="btn" data-bind="click: showMachineDialog">{{ _('Edit Machine Definition...') }}</button>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Pause after connection:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Some printers need a little more time to get sorted before GPX starts peppering it with questions. The default delay is 2 seconds.') }}">
                <div class="input-append">
                    <input type="number" step="1" class="input-mini text-right" data-bind="value: settings.plugins.GPX.connection_pause">
                    <span class="add-on">secs</span>
                </div>
            </div>
        </div>
        <div class="control-group" data-toggle="tooltip" title="{{ _('EEPROM settings are onboard preferences stored in non-volatile memory in the printer. Before changing these settings, you should back them up to an SD card using the LCD menu.') }}">
            <div class="controls">
                <button class="btn" data-bind="enable: isOperational(), click: showEepromDialog">{{ _('EEPROM Settings...') }}</button>
            </div>
        </div>
    </fieldset>
    <fieldset>
        <legend>Print Settings</legend>
        <div class="control-group">
            <label class="control-label">{{ _('Gcode flavor:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Indicates what flavor of gcode the slicer generated for uploaded gcode files. Reprap flavor recommended.') }}">
                <select data-bind="value: ini.printer.gcode_flavor">
                    <option value="reprap">{{ _('RepRap') }}</option>
                    <option value="makerbot">{{ _('MakerBot') }}</option>
                </select>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Recalc build progress:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Instruct GPX to recompute and replace the slicer\'s build progress reporting in gcode files') }}">
                <select class="select-mini" data-bind="value: ini.printer.build_progress">
                    <option value=undefined>{{ _('') }}</option>
                    <option value=0>{{ _('No') }}</option>
                    <option value=1>{{ _('Yes') }}</option>
                </select>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Ditto printing:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Include both extruders in the commands so that two prints occur simultaneously, one extruder offset apart.') }}">
                <select class="select-mini" data-bind="value: ini.printer.ditto_printing">
                    <option value=undefined>{{ _('') }}</option>
                    <option value=0>{{ _('No') }}</option>
                    <option value=1>{{ _('Yes') }}</option>
                </select>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Nominal filament width:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Filament diameter used by the slicer when generating the gcode. GPX scales the extrusion to compensate for differences between nominal and actual diameter so you can avoid reslicing for different filaments. Leave at 0 to just use extrusion as specified in the gcode.') }}">
                <div class="input-append">
                    <input type="number" step="0.01" class="input-mini text-right" data-bind="value: ini.printer.nominal_filament_diameter">
                    <span class="add-on">mm</span>
                </div>
            </div>
        </div>
        <!-- TODO move to per extruder -->
        <div class="control-group">
            <label class="control-label">{{ _('Actual filament width:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Actual diameter of the incoming filament. Measure using calipers in three spots and average them together. Set to 0 to use the extrusion amounts from the gcode without adjustment.') }}">
                <div class="input-append">
                    <input type="number" step="0.01" class="input-mini text-right" data-bind="value: ini.machine.actual_filament_diameter">
                    <span class="add-on">mm</span>
                </div>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Recalculate extrusion:') }}</label>
            <div class="controls" data-toggle="tooltip" title="{{ _('Recalculate and override the slicers extrusion amounts using actual and nominal filament diameters combined with packing density') }}">
                <select class="select-mini" data-bind="value: ini.printer.recalculate_5d">
                    <option value=undefined>{{ _('') }}</option>
                    <option value=0>{{ _('No') }}</option>
                    <option value=1>{{ _('Yes') }}</option>
                </select>
            </div>
        </div>
        <div class="control-group">
            <label class="control-label">{{ _('Packing density:') }}</label>
            <div class="controls" data-toggle="tooltip">
                <div class="input">
                    <input type="number" step="0.01" class="input-mini text-right" data-bind="value: ini.printer.packing_density">
                </div>
            </div>
        </div>
    </fieldset>
</form>

<div id="gpx_machine_settings" class="modal hide fade">
    <div class="modal-header">
        <a href="#" class="close" data-dismiss="modal" aria-hidden="true">&times;</a>
        <h3>{{ _('Edit Machine Settings') }}</h3>
    </div>
    <div class="modal-body">
        <form class="form-horizontal">
            <div class="control-group">
                <label class="control-label">{{ _('Nozzle diameter:') }}</label>
                <div class="controls">
                    <div class="input-append">
                        <input type="number" step="0.01" class="input-mini text-right" data-bind="value: machine.machine.nozzle_diameter">
                        <span class="add-on">mm</span>
                    </div>
                </div>
            </div>
            <table>
                <thead>
                    <th class="label-column"></th>
                    <th>X</th>
                    <th>Y</th>
                    <th>Z</th>
                    <th>A</th>
                    <th>B</th>
                </thead>
                <tr data-toggle="tooltip" data-placement="bottom" title="{{ _('GPX will clip feedrates specified by the gcode above this value.  Units are mm per min.') }}">
                    <td class="label-column text-right">{{ _('Max Feedrate:') }}</td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.x.max_feedrate"></td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.y.max_feedrate"></td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.z.max_feedrate"></td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.a.max_feedrate"></td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.b.max_feedrate"></td>
                </tr>
                <tr data-toggle="tooltip" data-placement="bottom" title="{{ _('Travel rate when executing homing (G28 G161 G162) gcodes.') }}">
                    <td class="label-column text-right">{{ _('Home Feedrate:') }}</td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.x.home_feedrate"></td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.y.home_feedrate"></td>
                    <td><input type="number" step="1" class="input-mini text-right" data-bind="value: machine.z.home_feedrate"></td>
                    <td style="text-align: center">N/A</td>
                    <td style="text-align: center">N/A</td>
                </tr>
                <tr data-toggle="tooltip" data-placement="bottom" title="{{ _('Steps on the stepper motor per mm of linear travel along the axis.') }}">
                    <td class="label-column text-right">{{ _('Steps per mm:') }}</td>
                    <td><input type="number" step="0.000001" class="input-mini text-right no-spinner" data-bind="value: machine.x.steps_per_mm"></td>
                    <td><input type="number" step="0.000001" class="input-mini text-right no-spinner" data-bind="value: machine.y.steps_per_mm"></td>
                    <td><input type="number" step="0.000001" class="input-mini text-right no-spinner" data-bind="value: machine.z.steps_per_mm"></td>
                    <td><input type="number" step="0.000001" class="input-mini text-right no-spinner" data-bind="value: machine.a.steps_per_mm"></td>
                    <td><input type="number" step="0.000001" class="input-mini text-right no-spinner" data-bind="value: machine.b.steps_per_mm"></td>
                </tr>
                <tr data-toggle="tooltip" data-placement="top" title="{{ _('Direction of home on the axis.  Maximum or minimum end of the axis.') }}">
                    <td class="label-column text-right">{{ _('Home:') }}</td>
                    <td><select class="select-mini" data-bind="value: machine.x.endstop">
                        <option value="undefined">{{ _('') }}</option>
                        <option value="0">{{ _('Min') }}</option>
                        <option value="1">{{ _('Max') }}</option>
                    </select></td>
                    <td><select class="select-mini" data-bind="value: machine.y.endstop">
                        <option value="undefined">{{ _('') }}</option>
                        <option value="0">{{ _('Min') }}</option>
                        <option value="1">{{ _('Max') }}</option>
                    </select></td>
                    <td><select class="select-mini" data-bind="value: machine.z.endstop">
                        <option value="undefined">{{ _('') }}</option>
                        <option value="0">{{ _('Min') }}</option>
                        <option value="1">{{ _('Max') }}</option>
                    </select></td>
                    <td style="text-align: center">N/A</td>
                    <td style="text-align: center">N/A</td>
                </tr>
            </table>
        </form>
    </div>
    <div class="modal-footer">
        <button class="btn pull-left" data-bind="click: requestMachineDefaults">{{ _('Reset to default') }}</button>
        <button class="btn" data-dismiss="modal" aria-hidden="true">{{ _('Cancel') }}</button>
        <button class="btn btn-primary" data-bind="click: saveMachineSettings">{{ _('Save') }}</button>
    </div>
</div>

{% macro gpx_checkbox(bind, label, tooltip='') -%}
    <div class="controls" data-toggle="tooltip" title="{{ tooltip }}">
        <label class="checkbox">
            <input type="checkbox" data-bind="checked: {{ bind }}" />{{ label }}
        </label>
    </div>
{%- endmacro %}

{% macro gpx_input(bind, step, min, max) -%}
    {% if min == max %}
    <input type="number" step="{{step}}" class="input text-right" data-bind="value: {{ bind }}">
    {% else %}
    <input type="number" step="{{step}}" min="{{min}}" max="{{max}}" class="input text-right" data-bind="value: {{ bind }}">
    {% endif %}
{%- endmacro %}

{% macro gpx_spinner(bind, step, min, max, label, tooltip='') -%}
<div class="control-group">
    <label class="control-label">{{ label }}</label>
    <div class="controls" data-toggle="tooltip" title="{{ tooltip }}">
        {{ gpx_input(bind, step, min, max) }}
    </div>
</div>
{%- endmacro %}

{% macro gpx_spinner_unit(bind, unit, step, min, max, label, tooltip='') -%}
<div class="control-group">
    <label class="control-label">{{ label }}</label>
    <div class="controls" data-toggle="tooltip" title="{{ tooltip }}">
        <div class="input-append">
            {{ gpx_input(bind, step, min, max) }}
            <span class="add-on">{{ unit }}</span>
        </div>
    </div>
</div>
{%- endmacro %}

{% macro gpx_axis_suffix(axis) -%}
    {% if axis == 'A' %}{{ _(' (Right)') }}{% elif axis == 'B' %}{{ _(' (Left)') }}{% endif %}
{%- endmacro %}

<div id="gpx_eeprom_settings" class="modal hide fade">
    <div class="modal-header">
        <a href="#" class="close" data-dismiss="modal" aria-hidden="true">&times;</a>
        <h3>{{ _('EEPROM Settings') }}</h3>
    </div>
    <div class="modal-body tabbable row-fluid">
        <div class="alert alert-error">
            {{ _('EEPROM settings are still an experimental feature of GPX. It is highly recommended that you backup your eeprom via the LCD panel before clicking save on this box.') }}
        </div>
        <div class="span3" id="gpx_eeprom_menu">
            <ul class="nav nav-list" id="gpx_eeprom_tabs">
                <li id="gpx_eeprom_misc_link" class="active"><a href="#gpx_eeprom_misc" data-toggle="tab">{{ _('Installed Equipment') }}</a>
                <li id="gpx_eeprom_axes_link"><a href="#gpx_eeprom_axes" data-toggle="tab">{{ _('Axes') }}</a>
                <li id="gpx_eeprom_endstops_link"><a href="#gpx_eeprom_endstops" data-toggle="tab">{{ _('Endstops') }}</a>
                <li id="gpx_eeprom_homing_link"><a href="#gpx_eeprom_homing" data-toggle="tab">{{ _('Homing') }}</a>
                <li id="gpx_eeprom_homing_link"><a href="#gpx_eeprom_digipot" data-toggle="tab">{{ _('Digipots') }}</a>
                <li id="gpx_eeprom_accel_link"><a href="#gpx_eeprom_accel" data-toggle="tab">{{ _('Acceleration') }}</a>
                <li id="gpx_eeprom_accel2_link"><a href="#gpx_eeprom_accel2" data-toggle="tab">{{ _('More Acceleration') }}</a>
                <li id="gpx_eeprom_features_link"><a href="#gpx_eeprom_features" data-toggle="tab">{{ _('Firmware Features') }}</a>
                <li id="gpx_eeprom_fans_link"><a href="#gpx_eeprom_fans" data-toggle="tab">{{ _('Fans') }}</a>
                <li id="gpx_eeprom_heaters_link"><a href="#gpx_eeprom_heaters" data-toggle="tab">{{ _('Heaters') }}</a>
            </ul>
        </div>
        <div class="tab-content span8 form-horizontal">
            <div id="gpx_eeprom_misc" class="tab-pane active">
                {{ gpx_spinner('eeprom.TOOL_COUNT', 1, 1, 2, _('Number of extruders')) }}
                {{ gpx_checkbox('eeprom.HBP_PRESENT', _('Heated build platform'), _('Indicates to the firmware whether there is a platform heater to control')) }}
                {{ gpx_checkbox('eeprom.PSTOP_ENABLE', _('Pause stop switch installed'), _("When checked, enable Sailfish's Pause Stop (P-Stop) switch detection mechanism. Pauses prints on an external electrical signal")) }}
                {{ gpx_checkbox('eeprom.CLEAR_FOR_ESTOP', _('Clear build on emergency stop'), _('By default, when the printer receives an abort, cancel or stop command over USB it treats it as an emergency and stops immediately. With this setting on, it will move build away from the nozzle first.')) }}
            </div>
            <div id="gpx_eeprom_axes" class="tab-pane">
                <div class="control-group">
                    {{ gpx_checkbox('z_hold', _('Hold Z axis'), _("If Z hold is on, the firmware will keep power to the Z stepper even when it isn't moving to hold it in place")) }}
                    {% set axes = "XYZAB" %}
                    {% for axis in axes %}
                    {% set axis_name = axis + ' axis' + gpx_axis_suffix(axis) %}
                    {{ gpx_checkbox('invert_axis.' + axis, _('Invert {}').format(axis_name), _('If an axis is moving in the wrong direction, toggle that axis')) }}
                    {% endfor %}
                    {% for axis in axes %}
                    {{ gpx_spinner_unit('steps_per_mm.' + axis, _('steps/mm'), 0.000001, 0, 0, _('{} Steps per mm').format(axis), _('The number of steps per mm')) }}
                    {% endfor %}
                </div>
            </div>
            <div id="gpx_eeprom_endstops" class="tab-pane">
                <div class="control-group">
                    {% for axis in axes %}
                    {% set axis_name = axis + ' axis' + gpx_axis_suffix(axis) %}
                    {{ gpx_checkbox('invert_endstop.' + axis, _('Invert {} endstop').format(axis_name), _("Default is for an endstop switch to close (pull low) when triggered (inverted). If you've replaced the endstops for normally closed ones (perhaps optical), clear the invert endstop box.")) }}
                    {% endfor %}
                </div>
            </div>
            <div id="gpx_eeprom_homing" class="tab-pane">
                    {% for axis in axes %}
                    {{ gpx_spinner_unit('home.' + axis, _('mm'), 0.1, 0, 0, _('{} home offset').format(axis), _('When all axes are in the home position [against their endstops], the home offset is the distance of the right nozzle from the center of the built platform.')) }}
                    {% endfor %}
                    {% for axis in "XY" %}
                    {{ gpx_spinner_unit('toolhead_offset.' + axis, _('mm'), 0.1, 0, 0, _('{} toolhead offset').format(axis), _('The toolhead offset is the distance between the nozzles on a dual nozzle printer.')) }}
                    {% endfor %}
            </div>
            <div id="gpx_eeprom_digipot" class="tab-pane">
                <div class="control-group">
                    {% for pot in range(5) %}
                    {{ gpx_spinner('eeprom.DIGI_POT_SETTINGS_%s' % pot, 1, 0, 118, _('Digital potentiometer {}').format(pot), _('Digipots are used to set the voltage level and thus the current driving the steppers.')) }}
                    {% endfor %}
                </div>
            </div>
            <div id="gpx_eeprom_accel" class="tab-pane">
                {{ gpx_checkbox('eeprom.ACCELERATION_ACTIVE', _('Acceleration enabled'), _('Check to use acceleration. Note you must turn acceleration on to print safely at speeds over 50mm/s.')) }}
                {% for axis in axes %}
                {{ gpx_spinner_unit('eeprom.MAX_ACCELERATION_AXIS_' + axis, _('mm/s²'), 1, 0, 10000, _('{} max acceleration').format(axis), _('The maximum acceleration and deceleration along the axis.')) }}
                {% endfor %}
            </div>
            <div id="gpx_eeprom_accel2" class="tab-pane">
                {% for axis in axes %}
                {{ gpx_spinner_unit('eeprom.MAX_SPEED_CHANGE_' + axis, _('mm/s'), 1, 0, 300, _('{} max speed change').format(axis), _('Maximum commanded instantaneous speed change.')) }}
                {% endfor %}
                {{ gpx_spinner('jkn_k', 0.001, 0, 1, _('JKN Advance K'), _('JKN is the Jetty-Kubicek-Newman Advance algorithm. The K parameter is an emperical fit value that helps control the amount of additional plastic that should be extruded during acceleration and retained during deceleration. It can remove blobbing and splaying on the corners or at junctions. Typical values for K range from 0.0001 to 0.01. Set to 0 to disable the use of this compensation.')) }}
                {{ gpx_spinner('jkn_k2', 0.001, 0, 1, _('JKN Advance K2'), _('Jetty-Kubicek-Newman Advance parameter K2 helps during the deceleration phase of moves to reduce the built up pressure in the extruder nozzle. Typical values for this parameter range from around 0.001 to 0.1. Set to 0 to disable use of this compensation.')) }}
            </div>
            <div id="gpx_eeprom_features" class="tab-pane">
                {{ gpx_checkbox('eeprom.SLOWDOWN_FLAG', _('Slow printing when acceleration planning falls behind'), _('Check to enable automatic print slowdown when the queue of planned segments is running low.')) }}
                {{ gpx_checkbox('eeprom.OVERRIDE_GCODE_TEMP', _('Override gcode target temperatures'), _('If override gcode temperature is on, it replaces any non-zero target temperature with the corresponding preheat temperature setting.')) }}
                {{ gpx_checkbox('eeprom.HEAT_DURING_PAUSE', _('Heat during pause'), _('Check to leave the heaters on for up to 30 minutes while the bot is paused. Uncheck to turn off the heaters whenever the bot is paused.')) }}
                {{ gpx_checkbox('eeprom.SD_USE_CRC', _('SD error checking'), _('If this is checked, the firmware will do a checksum on reads from the SD card to make sure it got correct information. It will retry five times. If all five attempts fail, it will cancel the print and display an error. With this clear, the error will go undetected and may ruin your print. NOTE that Replicator 1 is particularly susceptible to data transfer errors due to their electronics design.')) }}
                {{ gpx_checkbox('eeprom.EXTRUDER_HOLD', _('Extruder hold'), _('With this checked, the firmware will keep power to the extruder motor to hold it in place while not extruding. With the checkbox clear, the filament can move on its own either due to gravity or tension from moving the extruder around.')) }}
                {{ gpx_checkbox('eeprom.EXTRUDER_DEPRIME_ON_TRAVEL', _('Deprime on travel moves'), _('The bot deprimes (retracts filament) on commanded pauses and brief pauses caused by having the acceleration planner get behind. If deprime on travel is checked, it also deprimes when it detects a move without extrusion. If your slicer does that for you, turn this setting off. To entirely disable firmware deprime, set the deprime steps for the extruders to 0.')) }}
                {{ gpx_spinner_unit('eeprom.EXTRUDER_DEPRIME_STEPS_A', _('steps'), 1, 0, 65535, _('Right (A) extruder deprime distance'), _('When the firmware does an automatic retraction/deprime on the right extruder, it will retract this many steps.')) }}
                {{ gpx_spinner_unit('eeprom.EXTRUDER_DEPRIME_STEPS_B', _('steps'), 1, 0, 65535, _('Left (B) extruder deprime distance'), _('When the firmware does an automatic retraction/deprime on the left extruder, it will retract this many steps.')) }}
                {{ gpx_spinner_unit('eeprom.ALEVEL_MAX_ZPROBE_HITS', _('hits'), 0.1, 0, 200, _('Auto-level max Z probe hits'), _('If the auto-leveling probe registers too many hits during a print, the bot will pause printing and request manual intervention. To ignore probe hits while printing, specify a value of zero. The default value is 20. Only applies on bots with firmware-based auto-levelling and an auto-level probe installed.')) }}
                {{ gpx_spinner_unit('max_zdelta', _('mm'), 1, 0, 0, _('Auto-level max height difference'), _('Maximum vertical difference between any two probed leveling points. Default is 0.5mm.')) }}
            </div>
            <div id="gpx_eeprom_fans" class="tab-pane">
                {{ gpx_checkbox('eeprom.T0_COOLING_ENABLE', _('Enable right (A) extruder heatsink fan'), _('You basically want to leave this enabled since it helps avoid heat creep up the filament making jams and increasing the wear on your extruder.')) }}
                {{ gpx_spinner_unit('eeprom.T0_COOLING_SETPOINT_C', _('C'), 1, 0, 300, _('Right (A) heatsink fan setpoint'), _('When the extruder temperature is greater than the setpoint, the heatsink fan is turned on. Default is 50C.')) }}
                {{ gpx_checkbox('eeprom.T1_COOLING_ENABLE', _('Enable left (B) extruder heatsink fan'), _('You basically want to leave this enabled since it helps avoid heat creep up the filament making jams and increasing the wear on your extruder.')) }}
                {{ gpx_spinner_unit('eeprom.T1_COOLING_SETPOINT_C', _('C'), 1, 0, 300, _('Left (B) heatsink fan setpoint'), _('When the extruder temperature is greater than the setpoint, the heatsink fan is turned on. Default is 50C.')) }}
                <div data-bind="visible:show_fan_pwm">
                    {{ gpx_spinner_unit('eeprom.COOLING_FAN_DUTY_CYCLE', _('%%'), 1, 0, 100, _('Filament cooling fan duty cycle'), _('Only in Sailfish 7.8 or later for CoreXY and CloneR1. Set the blower fan strength (duty cycle) when it is activated by the print commands. Set this value from off (0%%) to full on (100%%) or anywhere between.')) }}
                </div>
            </div>
            <div id="gpx_eeprom_heaters" class="tab-pane" data-toggle="tooltip" title="{{ _('These are the parameters to the proportional-integral-derivative controller for the hotends') }}">
                <div class="well">
                    <legend>{{ _('Right (A) extruder PID values') }}</legend>
                    {% for term in "PID" %}
                    {{ gpx_spinner('eeprom.T0_EXTRUDER_{}_TERM'.format(term), 0.01, 0, 0, _('{} parameter'.format(term))) }}
                    {% endfor %}
                </div>
                <div class="well">
                    <legend>{{ _('Left (B) extruder PID values') }}</legend>
                    {% for term in "PID" %}
                    {{ gpx_spinner('eeprom.T1_EXTRUDER_{}_TERM'.format(term), 0.01, 0, 0, _('{} parameter'.format(term))) }}
                    {% endfor %}
                </div>
                <div class="well">
                    <legend>{{ _('Heated build platform PID values') }}</legend>
                    {% for term in "PID" %}
                    {{ gpx_spinner('eeprom.HBP_{}_TERM'.format(term), 0.01, 0, 0, _('{} parameter'.format(term))) }}
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <button class="btn" data-dismiss="modal">{{ _('Cancel') }}</button>
        <button class="btn" data-bind="css: { 'btn-primary': !is_saving(), 'btn-warning': is_saving() }, enable: !is_saving(), click: saveEepromSettings">{{ _('Save') }}</button>
    </div>
</div>
